diff --git forkSrcPrefix/gl_engine/shaders/encoder.glsl forkDstPrefix/gl_engine/shaders/encoder.glsl
index a86122a1671f69d8b57219db3204a483bede2dfe..a78a0ba5a48765045e7626943dbc3e04bb701191 100644
--- forkSrcPrefix/gl_engine/shaders/encoder.glsl
+++ forkDstPrefix/gl_engine/shaders/encoder.glsl
@@ -33,21 +33,64 @@ lowp vec2 depthWSEncode2n8(highp float depth) {
     return vec2(float(r) / 255.f, float(b) / 255.f);
 }
 
+// ===== BYTE ENCODING ====
+
+// Encodes a 2D vector into a 2D unsigned integer vector using a 16-bit range.
+// - v: A highp vec2 representing the input vector in the range [0, 1].
+// - Returns: A highp uvec2 representing the encoded values with each component scaled to the range [0, 65535].
+// - Requirement: v must be in the range [0, 1].
+highp uvec2 v2f32_to_v2u16(highp vec2 v) {
+    return uvec2(uint(v.x * 65535.0), uint(v.y * 65535.0));
+}
+
+// Decodes a 2D unsigned integer vector into a normalized 2D vector in the range [0, 1].
+// - e: A highp uvec2 representing the encoded values with each component in the range [0, 65535].
+// - Returns: A highp vec2 representing the decoded values in the range [0, 1].
+highp vec2 v2u16_to_v2f32(highp uvec2 e) {
+    return vec2(float(e.x) / 65535.0, float(e.y) / 65535.0);
+}
+
 // ===== OCTAHEDRON MAPPING FOR NORMALS =====
-// https://knarkowicz.wordpress.com/2014/04/16/octahedron-normal-vector-encoding/
-highp vec2 octWrap( highp vec2 v ) {
-    return ( 1.0 - abs( v.yx ) ) * ( ( v.x >= 0.0 && v.y >= 0.0 ) ? 1.0 : -1.0 );
-}
-highp uvec2 octNormalEncode2u16(highp vec3 normal) {
-    normal /= ( abs( normal.x ) + abs( normal.y ) + abs( normal.z ) );
-    if (normal.z < 0.0) normal.xy = octWrap( normal.xy );
-    normal.xy = normal.xy * 0.5 + 0.5;
-    return uvec2(normal * 65535.0);
-}
-highp vec3 octNormalDecode2u16(highp uvec2 octNormal16) {
-    highp vec2 f = vec2(octNormal16) / 65535.0 * 2.0 - 1.0;
-    highp vec3 n = vec3( f.x, f.y, 1.0 - abs( f.x ) - abs( f.y ) );
-    highp float t = clamp( -n.z, 0.0, 1.0 );
-    n.xy += ( n.x >= 0.0 && n.y >= 0.0) ? -t : t;
-    return normalize( n );
+// Implementation of the octahedral normal encoding based on the paper
+// "A Survey of Efficient Representations for Independent Unit Vector" by Cigolle et al.
+// see https://jcgt.org/published/0003/02/01/ listings 1 and 2
+
+// Note: Normal sign in OpenGL returns 0 if value is zero.
+highp vec2 signNotZero(highp vec2 v) {
+    return highp vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);
+}
+
+// Converts a normalized 3D vector into 2D octahedral coordinates.
+// - n: A normalized highp vec3 representing the input normal vector.
+// - Returns: A highp vec2 representing the normal vector encoded in the range [-1, 1] in an octahedral projection.
+// - Requirement: n must be normalized.
+highp vec2 v3f32_to_oct(highp vec3 n) {
+    highp vec2 ne = n.xy * (1.0 / (abs(n.x) + abs(n.y) + abs(n.z)));
+    return (n.z <= 0.0) ? ((1.0 - abs(ne.yx)) * signNotZero(ne)) : ne;
+}
+
+// Converts 2D octahedral coordinates back to a normalized 3D vector.
+// - en: A highp vec2 representing the octahedral projection coordinates.
+// - Returns: A highp vec3 containing the decoded normal vector.
+highp vec3 oct_to_v3f32(highp vec2 en) {
+    highp vec3 v = highp vec3(en.xy, 1.0 - abs(en.x) - abs(en.y));
+    if (v.z < 0.0) {
+        v.xy = (1.0 - abs(v.yx)) * signNotZero(v.xy);
+    }
+    return normalize(v);
+}
+
+// Encodes a normalized 3D vector into a 2D unsigned integer vector using octahedral projection.
+// - n: A normalized highp vec3 representing the input normal vector.
+// - Returns: A highp uvec2 representing the encoded values using octahedral projection with each component in the range [0, 65535].
+// - Requirement: n must be normalized.
+highp uvec2 octNormalEncode2u16(highp vec3 n) {
+    return v2f32_to_v2u16(v3f32_to_oct(n) * vec2(0.5) + vec2(0.5));
+}
+
+// Decodes a 2D unsigned integer vector into a normalized 3D vector using octahedral projection.
+// - e: A highp uvec2 representing the encoded octahedral projection coordinates with each component in the range [0, 65535].
+// - Returns: A highp vec3 representing the normalized decoded normal vector.
+highp vec3 octNormalDecode2u16(highp uvec2 e) {
+    return oct_to_v3f32(v2u16_to_v2f32(e) * vec2(2.0) + vec2(-1.0));
 }
