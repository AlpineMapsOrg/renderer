name: "Deploy"
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: deploy-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-android:
    runs-on: ubuntu-24.04
    env:
      QT_VERSION: '6.8.1'
      QT_MODULES: 'qtcharts qtpositioning'
    strategy:
      fail-fast: false
      matrix:
        qtarch: [android_arm64_v8a, android_armv7]

    steps:
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential ninja-build openjdk-17-jdk
        echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64/" >> $GITHUB_ENV
        # dpkg-query -L  openjdk-17-jdk-headless

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Install Qt native version (the one provided by aqt doesn't seem to work)
      uses: jurplel/install-qt-action@v4
      with:
        aqtversion: '==3.1.*'
        version: ${{ env.QT_VERSION }}
        host: 'linux'
        target: 'desktop'
        arch: 'linux_gcc_64'
        dir: '${{github.workspace}}/qt'
        install-deps: 'true'
        cache: true

    - name: Set QT_HOST_ROOT_DIR
      run: echo "QT_HOST_ROOT_DIR=${QT_ROOT_DIR}" >> "$GITHUB_ENV"

    - name: Install Qt crosscompile target version
      uses: jurplel/install-qt-action@v4
      with:
        aqtversion: '==3.1.*'
        version: ${{ env.QT_VERSION }}
        host: linux
        target: android
        arch: ${{ matrix.qtarch }}
        dir: '${{github.workspace}}/qt'
        install-deps: 'true'
        modules: ${{ env.QT_MODULES }}
        cache: true

    - name: Make qt cross binaries executable
      run: |
        chmod u+x ${QT_ROOT_DIR}/bin/*

    - name: Set reusable strings
      shell: bash
      run: |
        BUILD_DIR="${{ github.workspace }}/build"
        APK_TARGET="app"
        echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
        echo "APK_TARGET=$APK_TARGET" >> $GITHUB_ENV
        
        echo "INSTALL_DIR=${{ github.workspace }}/install/${{ matrix.qtarch }}" >> $GITHUB_ENV
        echo "APK_DIR=$BUILD_DIR/$APK_TARGET/android-build/build/outputs/apk/" >> $GITHUB_ENV
        echo "ANDROID_BUILD_DIR=$BUILD_DIR/$APK_TARGET/android-build/" >> $GITHUB_ENV
        echo "DEPLOYMENT_SETTINGS=$BUILD_DIR/$APK_TARGET/android-alpineapp-deployment-settings.json" >> $GITHUB_ENV
      
    - name: Configure
      env:
        CMAKE_PREFIX_PATH: ${{env.QT_ROOT_DIR}}/lib/cmake
      run: >
        ${QT_ROOT_DIR}/bin/qt-cmake
        -G Ninja
        -B $BUILD_DIR
        -DQT_HOST_PATH=${QT_HOST_ROOT_DIR}
        -DCMAKE_BUILD_TYPE=Release
        -DALP_ENABLE_ASSERTS=ON
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build $BUILD_DIR

    - name: Signing Android package with common key
      env: 
        secret_test: ${{ secrets.KEYSTOREPASSWORD }}
      if: env.secret_test != ''
      run: |
        echo ${{ secrets.SIGNINGKEYBASE64 }} > release.keystore.base64
        base64 -d release.keystore.base64 > release.keystore
        $QT_HOST_ROOT_DIR/bin/androiddeployqt --input $DEPLOYMENT_SETTINGS --output $ANDROID_BUILD_DIR --android-platform android-35 --gradle --release --sign release.keystore alpinemaps --storepass ${{ secrets.KEYSTOREPASSWORD }}
        
    - name: Signing Android packages with generated key
      env: 
        secret_test: ${{ secrets.KEYSTOREPASSWORD }}
      if: env.secret_test == ''
      run: |
        keytool -genkey -v -keystore release.keystore -alias alpinemaps -keyalg RSA -sigalg SHA1withRSA -keysize 2048 -validity 10000 -keypass asdfasdf -storepass asdfasdf -dname "CN=Franz, OU=IT, O=Furz, L=Rattenberg, ST=Tirol, C=AT"
        $QT_HOST_ROOT_DIR/bin/androiddeployqt --input $DEPLOYMENT_SETTINGS --output $ANDROID_BUILD_DIR --android-platform android-35 --gradle --release --sign release.keystore alpinemaps --storepass asdfasdf
        
        README_PATH=$APK_DIR/read_me.txt
        echo "The apk was signed with a generated key which changes every time the apk is generated. This means, that android might refuse to install it if another apk with the same app was installed previously. You'll have to deinstall it. Doing so will delete all settings and cache." >> $README_PATH
        echo "" >> $README_PATH
        echo "In order to prevent that, you have to generate your own key or use our public key:" >> $README_PATH
        echo "" >> $README_PATH
        echo "To generate your own key:" >> $README_PATH
        echo "- https://stackoverflow.com/questions/3997748/how-can-i-create-a-keystore. Use 'alpinemaps' as the alias!" >> $README_PATH
        echo "- If you have the android dev setup ready in Qt Creator, you can also create the keystore via Projects (on the left side toolboar) -> Android Qt ... -> Build -> Build Steps -> Build Android APK -> Application Signature -> Create.  Use 'alpinemaps' as the alias!" >> $README_PATH
        echo "- Then you have to encode the keystore in base64, e.g., on linux via 'base64 keystorefile > keystorefile.base64'" >> $README_PATH
        echo "- Finally, create the following secrets in github -> your repo -> Settings -> Secrets and variables -> Actions -> Repository secrets" >> $README_PATH
        echo "  SIGNINGKEYBASE64 = the base64 encoded key" >> $README_PATH
        echo "  KEYSTOREPASSWORD = the password used to create the keystore" >> $README_PATH
        echo "" >> $README_PATH
        echo "To use our public key, go to https://github.com/AlpineMapsOrg/renderer/blob/main/creating_apk_keys.md" >> $README_PATH
        echo "" >> $README_PATH
        echo "Oh, and I hope this saved your day :)" >> $README_PATH
      
    - name: Copy android packages
      run: |
        mkdir -p $INSTALL_DIR
        cp -r $APK_DIR/* $INSTALL_DIR

    - name: Create artifact
      uses: actions/upload-artifact@v4
      with:
        name: files_${{ matrix.qtarch }}
        path: ${{ github.workspace }}/install/
        if-no-files-found: error

        
  build-wasm:
    runs-on: ubuntu-24.04
    env:
      QT_VERSION: '6.8.1'
      WEBASSEMBLY_VERSION: '3.1.56'
    strategy:
      fail-fast: false
      matrix:
        config: [wasm_st, wasm_st_debug, wasm_st_lto, wasm_mt, wasm_mt_debug, wasm_mt_lto]
        include:
          - config: wasm_st
            qtflags: '-release -optimize-size -submodules qtdeclarative,qtbase -skip qtlanguageserver,qtquicktimeline,qtimageformats -make libs -gui $(cat $QT_LITE_CONFIG) -no-feature-thread'
            cmakeflags: '-DALP_ENABLE_THREADING=OFF -DALP_ENABLE_ASSERTS=OFF'
          - config: wasm_st_debug
            qtflags: '-release -optimize-size -submodules qtdeclarative,qtbase -skip qtlanguageserver,qtquicktimeline,qtimageformats -make libs -gui -no-feature-thread'
            cmakeflags: '-DALP_ENABLE_THREADING=OFF -DALP_ENABLE_ASSERTS=ON'
          - config: wasm_st_lto
            qtflags: '-release -optimize-size -submodules qtdeclarative,qtbase -skip qtlanguageserver,qtquicktimeline,qtimageformats -make libs -gui -ltcg $(cat $QT_LITE_CONFIG) -no-feature-thread'
            cmakeflags: '-DALP_ENABLE_THREADING=OFF -DALP_ENABLE_ASSERTS=OFF -DALP_ENABLE_LTO=ON'
          - config: wasm_mt
            qtflags: '-release -optimize-size -submodules qtdeclarative,qtbase -skip qtlanguageserver,qtquicktimeline,qtimageformats -make libs -gui $(cat $QT_LITE_CONFIG) -feature-thread'
            cmakeflags: '-DALP_ENABLE_THREADING=ON -DALP_ENABLE_ASSERTS=OFF'
          - config: wasm_mt_debug
            qtflags: '-release -optimize-size -submodules qtdeclarative,qtbase -skip qtlanguageserver,qtquicktimeline,qtimageformats -make libs -gui -feature-thread'
            cmakeflags: '-DALP_ENABLE_THREADING=ON -DALP_ENABLE_ASSERTS=ON'
          - config: wasm_mt_lto
            qtflags: '-release -optimize-size -submodules qtdeclarative,qtbase -skip qtlanguageserver,qtquicktimeline,qtimageformats -make libs -gui -ltcg $(cat $QT_LITE_CONFIG) -feature-thread'
            cmakeflags: '-DALP_ENABLE_THREADING=ON -DALP_ENABLE_ASSERTS=OFF -DALP_ENABLE_LTO=ON'
            
    steps:
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential ninja-build

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    - uses: mymindstorm/setup-emsdk@v13
      with:
        version: ${{ env.WEBASSEMBLY_VERSION }}

    - name: Install Qt native version (required for cross building)
      uses: jurplel/install-qt-action@v4
      with:
        aqtversion: '==3.1.*'
        version: ${{ env.QT_VERSION }}
        host: linux
        target: 'desktop'
        arch: linux_gcc_64
        dir: '${{github.workspace}}/qt_host'
        install-deps: 'true'
        modules: 'qtshadertools'
        cache: true
        tools: 'tools_cmake'
        
    - name: Set reusable strings
      shell: bash
      run: |
        echo "BUILD_DIR=$(pwd)/build" >> $GITHUB_ENV
        echo "INSTALL_DIR=install/${{ matrix.config}}" >> $GITHUB_ENV
        echo "QT_WASM_ROOT_DIR=$(pwd)/qt_wasm_lite" >> $GITHUB_ENV
        echo "QT_SRC_CONFIGURE=$(pwd)/qt_src/configure" >> $GITHUB_ENV
        echo "QT_LITE_CONFIG=$(pwd)/misc/qt_lite.txt" >> $GITHUB_ENV
      
    - name: Cache Qt WebAssembly build
      id: qt-cache
      uses: actions/cache@v4
      with:
        path: qt_wasm_lite
        key: ${{ matrix.config }}_qt-${{ env.QT_VERSION }}_emcc-${{ env.WEBASSEMBLY_VERSION }}
        
    - name: Download and patch Qt
      if: steps.qt-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        git clone --branch $QT_VERSION git://code.qt.io/qt/qt5.git qt_src
        mkdir qt_wasm_build
        cd qt_wasm_build
        $QT_SRC_CONFIGURE -qt-host-path $QT_ROOT_DIR -platform wasm-emscripten -init-submodules -submodules qtdeclarative,qtbase -skip qtlanguageserver,qtquicktimeline,qtimageformats
        cd ${{github.workspace}}/qt_src/qtbase
        git apply ${{github.workspace}}/misc/qt_68_qtbase_remove_dejavu_fonts.patch


    - name: Build Qt for Webassembly (custom version)
      if: steps.qt-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd qt_wasm_build
        ${{env.QT_SRC_CONFIGURE}} -qt-host-path $QT_ROOT_DIR -platform wasm-emscripten ${{ matrix.qtflags }} -prefix "${QT_WASM_ROOT_DIR}/"
        # fix broken lto=thin build (https://bugreports.qt.io/browse/QTBUG-129522)
        sed -i 's/-flto=thin/-flto/g' ./build.ninja
        cmake --build . --parallel && cmake --install .
        # Fail if the directory is not created or is empty
        [ -d "$QT_WASM_ROOT_DIR" ] && [ "$(ls -A $QT_WASM_ROOT_DIR)" ] || exit 1

    - name: Debug output
      if: steps.qt-cache.outputs.cache-hit != 'true'
      run: |
        emcc -v
        echo "cmake version:"
        cmake --version
        cd ${{ github.workspace }} && ls -l
        cat ./qt_wasm_build/build.ninja

    - name: Remove StatsWindow, otherwise the webassembly will link against qtwidgets and charts.
      run: rm ./app/StatsWindow.qml
      
    - name: Configure
      env:
        CMAKE_PREFIX_PATH: ${{env.Qt6_DIR}}/lib/cmake
      run: >
        ${QT_WASM_ROOT_DIR}/bin/qt-cmake
        -G Ninja
        -B $BUILD_DIR
        -DCMAKE_BUILD_TYPE=MinSizeRel
        -DALP_WWW_INSTALL_DIR=$INSTALL_DIR
        -DFMT_INSTALL=OFF
        ${{ matrix.cmakeflags }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build $BUILD_DIR --target install

    - name: Create artifact
      uses: actions/upload-artifact@v4
      with:
        name: files_${{ matrix.config}}
        path: ${{ github.workspace }}/install/
        if-no-files-found: error
        
  deploy:
    if: github.event_name == 'push'
    needs:
    - build-android
    - build-wasm
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    
    steps:
    - name: Install dependencies
      run: sudo apt-get install -y lftp
      
    - name: Clone repository (only for version number)
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: ${{github.workspace}}/downloaded
    
    - name: Move into place
      run: |
        mkdir $GITHUB_WORKSPACE/github_page
        mv $GITHUB_WORKSPACE/downloaded/*/* $GITHUB_WORKSPACE/github_page/
        
    - name: Upload to an FTP host
      env: 
        FTP_USER: ${{ secrets.FTP_USER }}
        FTP_PASS: ${{ secrets.FTP_PASS }}
        FTP_HOST: ${{ secrets.FTP_HOST }}
      if: env.FTP_HOST != ''
      run: |
        reponame=$(echo $GITHUB_REPOSITORY  | grep -oE "[^/]*$")
        lftp -c "
        set ftp:ssl-force true;
        open -u $FTP_USER,$FTP_PASS $FTP_HOST;
        mirror -R -e -v -n $GITHUB_WORKSPACE/github_page/. ./${reponame}_$(git describe --tags --dirty=-d --abbrev=1);
        "
      
    - name: Fix headers for wasm multithread
      run: |
        cd $GITHUB_WORKSPACE/github_page/wasm_mt_lto
        wget https://raw.githubusercontent.com/gzuidhof/coi-serviceworker/master/coi-serviceworker.min.js
        sed -i -e 's#<body onload="init()">#<body onload="init()"><script src="coi-serviceworker\.min\.js"></script>#g' alpineapp.html
        
        cd $GITHUB_WORKSPACE/github_page/wasm_mt
        wget https://raw.githubusercontent.com/gzuidhof/coi-serviceworker/master/coi-serviceworker.min.js
        sed -i -e 's#<body onload="init()">#<body onload="init()"><script src="coi-serviceworker\.min\.js"></script>#g' alpineapp.html
        
    - name: Generate Directory Listings
      uses: jayanta525/github-pages-directory-listing@v4.0.0
      with:
        FOLDER: github_page
    
    - name: Create Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ${{github.workspace}}/github_page
    
    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

